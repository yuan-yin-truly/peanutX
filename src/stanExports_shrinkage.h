// Generated by rstantools.  Do not edit by hand.

/*
    peanutX is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    peanutX is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with peanutX.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-1-g67504470
#include <stan/model/model_header.hpp>
namespace model_shrinkage_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 14, column 2 to column 18)",
                                                      " (in 'string', line 15, column 2 to column 50)",
                                                      " (in 'string', line 16, column 2 to column 43)",
                                                      " (in 'string', line 17, column 2 to column 45)",
                                                      " (in 'string', line 18, column 2 to column 52)",
                                                      " (in 'string', line 19, column 2 to column 24)",
                                                      " (in 'string', line 20, column 2 to column 24)",
                                                      " (in 'string', line 23, column 2 to column 30)",
                                                      " (in 'string', line 24, column 2 to column 35)",
                                                      " (in 'string', line 26, column 4 to column 44)",
                                                      " (in 'string', line 25, column 15 to line 27, column 3)",
                                                      " (in 'string', line 25, column 2 to line 27, column 3)",
                                                      " (in 'string', line 30, column 4 to column 54)",
                                                      " (in 'string', line 29, column 15 to line 31, column 3)",
                                                      " (in 'string', line 29, column 2 to line 31, column 3)",
                                                      " (in 'string', line 36, column 8 to line 38, column 55)",
                                                      " (in 'string', line 35, column 19 to line 39, column 7)",
                                                      " (in 'string', line 35, column 6 to line 39, column 7)",
                                                      " (in 'string', line 34, column 17 to line 40, column 5)",
                                                      " (in 'string', line 34, column 4 to line 40, column 5)",
                                                      " (in 'string', line 33, column 26 to line 41, column 3)",
                                                      " (in 'string', line 33, column 2 to line 41, column 3)",
                                                      " (in 'string', line 2, column 2 to column 8)",
                                                      " (in 'string', line 3, column 2 to column 8)",
                                                      " (in 'string', line 4, column 2 to column 8)",
                                                      " (in 'string', line 5, column 27 to column 28)",
                                                      " (in 'string', line 5, column 2 to column 30)",
                                                      " (in 'string', line 6, column 24 to column 25)",
                                                      " (in 'string', line 6, column 27 to column 28)",
                                                      " (in 'string', line 6, column 2 to column 30)",
                                                      " (in 'string', line 7, column 20 to column 21)",
                                                      " (in 'string', line 7, column 2 to column 23)",
                                                      " (in 'string', line 8, column 2 to column 43)",
                                                      " (in 'string', line 9, column 10 to column 11)",
                                                      " (in 'string', line 9, column 2 to column 15)",
                                                      " (in 'string', line 10, column 2 to column 16)",
                                                      " (in 'string', line 11, column 2 to column 21)",
                                                      " (in 'string', line 14, column 15 to column 16)",
                                                      " (in 'string', line 14, column 10 to column 11)",
                                                      " (in 'string', line 15, column 47 to column 48)",
                                                      " (in 'string', line 15, column 33 to column 34)",
                                                      " (in 'string', line 16, column 40 to column 41)",
                                                      " (in 'string', line 16, column 31 to column 32)",
                                                      " (in 'string', line 17, column 31 to column 32)",
                                                      " (in 'string', line 18, column 33 to column 34)"};
#include <stan_meta_header.hpp>
class model_shrinkage final : public model_base_crtp<model_shrinkage> {
private:
  int N;
  int M;
  int K;
  std::vector<int> cell_type;
  std::vector<std::vector<int>> counts;
  std::vector<int> OC;
  int run_estimation;
  Eigen::Matrix<double, -1, 1> p;
  double delta_sd;
  double background_sd;
 
public:
  ~model_shrinkage() { }
  
  inline std::string model_name() const final { return "model_shrinkage"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-1-g67504470", "stancflags = "};
  }
  
  
  model_shrinkage(stan::io::var_context& context__,
                  unsigned int random_seed__ = 0,
                  std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_shrinkage_namespace::model_shrinkage";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 23;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 23;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 24;
      context__.validate_dims("data initialization","M","int",
          context__.to_vec());
      M = std::numeric_limits<int>::min();
      
      current_statement__ = 24;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 25;
      context__.validate_dims("data initialization","K","int",
          context__.to_vec());
      K = std::numeric_limits<int>::min();
      
      current_statement__ = 25;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 26;
      validate_non_negative_index("cell_type", "M", M);
      current_statement__ = 27;
      context__.validate_dims("data initialization","cell_type","int",
          context__.to_vec(M));
      cell_type = std::vector<int>(M, std::numeric_limits<int>::min());
      
      current_statement__ = 27;
      assign(cell_type, nil_index_list(), context__.vals_i("cell_type"),
        "assigning variable cell_type");
      current_statement__ = 27;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 27;
        current_statement__ = 27;
        check_greater_or_equal(function__, "cell_type[sym1__]",
                               cell_type[(sym1__ - 1)], 1);}
      current_statement__ = 28;
      validate_non_negative_index("counts", "N", N);
      current_statement__ = 29;
      validate_non_negative_index("counts", "M", M);
      current_statement__ = 30;
      context__.validate_dims("data initialization","counts","int",
          context__.to_vec(N, M));
      counts = std::vector<std::vector<int>>(N, std::vector<int>(M, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> counts_flat__;
        current_statement__ = 30;
        assign(counts_flat__, nil_index_list(), context__.vals_i("counts"),
          "assigning variable counts_flat__");
        current_statement__ = 30;
        pos__ = 1;
        current_statement__ = 30;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 30;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 30;
            assign(counts,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              counts_flat__[(pos__ - 1)], "assigning variable counts");
            current_statement__ = 30;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 30;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 30;
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          current_statement__ = 30;
          current_statement__ = 30;
          check_greater_or_equal(function__, "counts[sym1__, sym2__]",
                                 counts[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      current_statement__ = 31;
      validate_non_negative_index("OC", "M", M);
      current_statement__ = 32;
      context__.validate_dims("data initialization","OC","int",
          context__.to_vec(M));
      OC = std::vector<int>(M, std::numeric_limits<int>::min());
      
      current_statement__ = 32;
      assign(OC, nil_index_list(), context__.vals_i("OC"),
        "assigning variable OC");
      current_statement__ = 32;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 32;
        current_statement__ = 32;
        check_greater_or_equal(function__, "OC[sym1__]", OC[(sym1__ - 1)], 1);
      }
      current_statement__ = 33;
      context__.validate_dims("data initialization","run_estimation","int",
          context__.to_vec());
      run_estimation = std::numeric_limits<int>::min();
      
      current_statement__ = 33;
      run_estimation = context__.vals_i("run_estimation")[(1 - 1)];
      current_statement__ = 33;
      current_statement__ = 33;
      check_greater_or_equal(function__, "run_estimation", run_estimation, 0);
      current_statement__ = 33;
      current_statement__ = 33;
      check_less_or_equal(function__, "run_estimation", run_estimation, 1);
      current_statement__ = 34;
      validate_non_negative_index("p", "N", N);
      current_statement__ = 35;
      context__.validate_dims("data initialization","p","double",
          context__.to_vec(N));
      p = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(p, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> p_flat__;
        current_statement__ = 35;
        assign(p_flat__, nil_index_list(), context__.vals_r("p"),
          "assigning variable p_flat__");
        current_statement__ = 35;
        pos__ = 1;
        current_statement__ = 35;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 35;
          assign(p, cons_list(index_uni(sym1__), nil_index_list()),
            p_flat__[(pos__ - 1)], "assigning variable p");
          current_statement__ = 35;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 35;
      current_statement__ = 35;
      check_simplex(function__, "p", p);
      current_statement__ = 36;
      context__.validate_dims("data initialization","delta_sd","double",
          context__.to_vec());
      delta_sd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 36;
      delta_sd = context__.vals_r("delta_sd")[(1 - 1)];
      current_statement__ = 37;
      context__.validate_dims("data initialization","background_sd","double",
          context__.to_vec());
      background_sd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 37;
      background_sd = context__.vals_r("background_sd")[(1 - 1)];
      current_statement__ = 38;
      validate_non_negative_index("r", "K", K);
      current_statement__ = 39;
      validate_positive_index("r", "N", N);
      current_statement__ = 40;
      validate_non_negative_index("background", "N", N);
      current_statement__ = 41;
      validate_non_negative_index("background", "M", M);
      current_statement__ = 42;
      validate_non_negative_index("delta", "M", M);
      current_statement__ = 43;
      validate_non_negative_index("delta", "N", N);
      current_statement__ = 44;
      validate_non_negative_index("delta_mean", "M", M);
      current_statement__ = 45;
      validate_non_negative_index("background_mean", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += K * (N - 1);
      num_params_r__ += N * M;
      num_params_r__ += M * N;
      num_params_r__ += M;
      num_params_r__ += N;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_shrinkage_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> r;
      r = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>(N));
      stan::math::fill(r, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> r_in__;
      r_in__ = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>(
        (N - 1)));
      stan::math::fill(r_in__, DUMMY_VAR__);
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 1;
        assign(r_in__, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector((N - 1)), "assigning variable r_in__");}
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 1;
        if (jacobian__) {
          current_statement__ = 1;
          assign(r, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::simplex_constrain(r_in__[(sym1__ - 1)], lp__),
            "assigning variable r");
        } else {
          current_statement__ = 1;
          assign(r, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::simplex_constrain(r_in__[(sym1__ - 1)]),
            "assigning variable r");
        }}
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> background;
      background = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(M));
      stan::math::fill(background, DUMMY_VAR__);
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 2;
        assign(background, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(M), "assigning variable background");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 2;
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          current_statement__ = 2;
          if (jacobian__) {
            current_statement__ = 2;
            assign(background,
              cons_list(index_uni(sym1__),
                cons_list(index_uni(sym2__), nil_index_list())),
              stan::math::lub_constrain(
                background[(sym1__ - 1)][(sym2__ - 1)], 0, 0.5, lp__),
              "assigning variable background");
          } else {
            current_statement__ = 2;
            assign(background,
              cons_list(index_uni(sym1__),
                cons_list(index_uni(sym2__), nil_index_list())),
              stan::math::lub_constrain(
                background[(sym1__ - 1)][(sym2__ - 1)], 0, 0.5),
              "assigning variable background");
          }}}
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> delta;
      delta = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(M, Eigen::Matrix<local_scalar_t__, -1, 1>(N));
      stan::math::fill(delta, DUMMY_VAR__);
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 3;
        assign(delta, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(N), "assigning variable delta");}
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 3;
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          current_statement__ = 3;
          if (jacobian__) {
            current_statement__ = 3;
            assign(delta,
              cons_list(index_uni(sym1__),
                cons_list(index_uni(sym2__), nil_index_list())),
              stan::math::lub_constrain(delta[(sym1__ - 1)][(sym2__ - 1)], 0,
                1, lp__), "assigning variable delta");
          } else {
            current_statement__ = 3;
            assign(delta,
              cons_list(index_uni(sym1__),
                cons_list(index_uni(sym2__), nil_index_list())),
              stan::math::lub_constrain(delta[(sym1__ - 1)][(sym2__ - 1)], 0,
                1), "assigning variable delta");
          }}}
      Eigen::Matrix<local_scalar_t__, -1, 1> delta_mean;
      delta_mean = Eigen::Matrix<local_scalar_t__, -1, 1>(M);
      stan::math::fill(delta_mean, DUMMY_VAR__);
      
      current_statement__ = 4;
      delta_mean = in__.vector(M);
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 4;
        if (jacobian__) {
          current_statement__ = 4;
          assign(delta_mean, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(delta_mean[(sym1__ - 1)], 0, 1, lp__),
            "assigning variable delta_mean");
        } else {
          current_statement__ = 4;
          assign(delta_mean, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(delta_mean[(sym1__ - 1)], 0, 1),
            "assigning variable delta_mean");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> background_mean;
      background_mean = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(background_mean, DUMMY_VAR__);
      
      current_statement__ = 5;
      background_mean = in__.vector(N);
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 5;
        if (jacobian__) {
          current_statement__ = 5;
          assign(background_mean,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(background_mean[(sym1__ - 1)], 0, 0.5,
              lp__), "assigning variable background_mean");
        } else {
          current_statement__ = 5;
          assign(background_mean,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(background_mean[(sym1__ - 1)], 0, 0.5),
            "assigning variable background_mean");
        }}
      local_scalar_t__ tau_a;
      tau_a = DUMMY_VAR__;
      
      current_statement__ = 6;
      tau_a = in__.scalar();
      current_statement__ = 6;
      if (jacobian__) {
        current_statement__ = 6;
        tau_a = stan::math::lb_constrain(tau_a, 0, lp__);
      } else {
        current_statement__ = 6;
        tau_a = stan::math::lb_constrain(tau_a, 0);
      }
      local_scalar_t__ tau_b;
      tau_b = DUMMY_VAR__;
      
      current_statement__ = 7;
      tau_b = in__.scalar();
      current_statement__ = 7;
      if (jacobian__) {
        current_statement__ = 7;
        tau_b = stan::math::lb_constrain(tau_b, 0, lp__);
      } else {
        current_statement__ = 7;
        tau_b = stan::math::lb_constrain(tau_b, 0);
      }
      {
        current_statement__ = 8;
        lp_accum__.add(normal_lpdf<propto__>(tau_a, 0, delta_sd));
        current_statement__ = 9;
        lp_accum__.add(normal_lpdf<propto__>(tau_b, 0, background_sd));
        current_statement__ = 12;
        for (int m = 1; m <= M; ++m) {
          current_statement__ = 10;
          lp_accum__.add(
            normal_lpdf<propto__>(delta[(m - 1)], delta_mean[(m - 1)], tau_a));
        }
        current_statement__ = 15;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 13;
          lp_accum__.add(
            normal_lpdf<propto__>(background[(n - 1)],
              background_mean[(n - 1)], tau_b));}
        current_statement__ = 22;
        if (logical_eq(run_estimation, 1)) {
          current_statement__ = 20;
          for (int n = 1; n <= N; ++n) {
            current_statement__ = 18;
            for (int m = 1; m <= M; ++m) {
              current_statement__ = 16;
              lp_accum__.add(
                poisson_lpmf<propto__>(counts[(n - 1)][(m - 1)],
                  (((((OC[(m - 1)] * (1 - background[(n - 1)][(m - 1)])) *
                       delta[(m - 1)][(n - 1)]) * p[(n - 1)]) +
                     (((OC[(m - 1)] * (1 - background[(n - 1)][(m - 1)])) *
                        (1 - delta[(m - 1)][(n - 1)])) *
                       r[(cell_type[(m - 1)] - 1)][(n - 1)])) +
                    (OC[(m - 1)] * background[(n - 1)][(m - 1)]))));}}
        } 
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_shrinkage_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<Eigen::Matrix<double, -1, 1>> r;
      r = std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(N));
      stan::math::fill(r, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> r_in__;
      r_in__ = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>(
        (N - 1)));
      stan::math::fill(r_in__, DUMMY_VAR__);
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 1;
        assign(r_in__, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector((N - 1)), "assigning variable r_in__");}
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 1;
        assign(r, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::simplex_constrain(r_in__[(sym1__ - 1)]),
          "assigning variable r");}
      std::vector<Eigen::Matrix<double, -1, 1>> background;
      background = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(M));
      stan::math::fill(background, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 2;
        assign(background, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(M), "assigning variable background");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 2;
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          current_statement__ = 2;
          assign(background,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            stan::math::lub_constrain(background[(sym1__ - 1)][(sym2__ - 1)],
              0, 0.5), "assigning variable background");}}
      std::vector<Eigen::Matrix<double, -1, 1>> delta;
      delta = std::vector<Eigen::Matrix<double, -1, 1>>(M, Eigen::Matrix<double, -1, 1>(N));
      stan::math::fill(delta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 3;
        assign(delta, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(N), "assigning variable delta");}
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 3;
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          current_statement__ = 3;
          assign(delta,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            stan::math::lub_constrain(delta[(sym1__ - 1)][(sym2__ - 1)], 0, 1),
            "assigning variable delta");}}
      Eigen::Matrix<double, -1, 1> delta_mean;
      delta_mean = Eigen::Matrix<double, -1, 1>(M);
      stan::math::fill(delta_mean, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      delta_mean = in__.vector(M);
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 4;
        assign(delta_mean, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(delta_mean[(sym1__ - 1)], 0, 1),
          "assigning variable delta_mean");}
      Eigen::Matrix<double, -1, 1> background_mean;
      background_mean = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(background_mean, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      background_mean = in__.vector(N);
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 5;
        assign(background_mean,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(background_mean[(sym1__ - 1)], 0, 0.5),
          "assigning variable background_mean");}
      double tau_a;
      tau_a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      tau_a = in__.scalar();
      current_statement__ = 6;
      tau_a = stan::math::lb_constrain(tau_a, 0);
      double tau_b;
      tau_b = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      tau_b = in__.scalar();
      current_statement__ = 7;
      tau_b = stan::math::lb_constrain(tau_b, 0);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          vars__.emplace_back(r[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(background[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          vars__.emplace_back(delta[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(delta_mean[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(background_mean[(sym1__ - 1)]);}
      vars__.emplace_back(tau_a);
      vars__.emplace_back(tau_b);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<Eigen::Matrix<double, -1, 1>> r;
      r = std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(N));
      stan::math::fill(r, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> r_flat__;
        current_statement__ = 1;
        assign(r_flat__, nil_index_list(), context__.vals_r("r"),
          "assigning variable r_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            current_statement__ = 1;
            assign(r,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              r_flat__[(pos__ - 1)], "assigning variable r");
            current_statement__ = 1;
            pos__ = (pos__ + 1);}}
      }
      std::vector<Eigen::Matrix<double, -1, 1>> r_free__;
      r_free__ = std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(
        (N - 1)));
      stan::math::fill(r_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 1;
        assign(r_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::simplex_free(r[(sym1__ - 1)]),
          "assigning variable r_free__");}
      std::vector<Eigen::Matrix<double, -1, 1>> background;
      background = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(M));
      stan::math::fill(background, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> background_flat__;
        current_statement__ = 2;
        assign(background_flat__, nil_index_list(),
          context__.vals_r("background"),
          "assigning variable background_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 2;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 2;
            assign(background,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              background_flat__[(pos__ - 1)], "assigning variable background");
            current_statement__ = 2;
            pos__ = (pos__ + 1);}}
      }
      std::vector<Eigen::Matrix<double, -1, 1>> background_free__;
      background_free__ = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(M));
      stan::math::fill(background_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 2;
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          current_statement__ = 2;
          assign(background_free__,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            stan::math::lub_free(background[(sym1__ - 1)][(sym2__ - 1)], 0,
              0.5), "assigning variable background_free__");}}
      std::vector<Eigen::Matrix<double, -1, 1>> delta;
      delta = std::vector<Eigen::Matrix<double, -1, 1>>(M, Eigen::Matrix<double, -1, 1>(N));
      stan::math::fill(delta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> delta_flat__;
        current_statement__ = 3;
        assign(delta_flat__, nil_index_list(), context__.vals_r("delta"),
          "assigning variable delta_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 3;
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            current_statement__ = 3;
            assign(delta,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              delta_flat__[(pos__ - 1)], "assigning variable delta");
            current_statement__ = 3;
            pos__ = (pos__ + 1);}}
      }
      std::vector<Eigen::Matrix<double, -1, 1>> delta_free__;
      delta_free__ = std::vector<Eigen::Matrix<double, -1, 1>>(M, Eigen::Matrix<double, -1, 1>(N));
      stan::math::fill(delta_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 3;
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          current_statement__ = 3;
          assign(delta_free__,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            stan::math::lub_free(delta[(sym1__ - 1)][(sym2__ - 1)], 0, 1),
            "assigning variable delta_free__");}}
      Eigen::Matrix<double, -1, 1> delta_mean;
      delta_mean = Eigen::Matrix<double, -1, 1>(M);
      stan::math::fill(delta_mean, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> delta_mean_flat__;
        current_statement__ = 4;
        assign(delta_mean_flat__, nil_index_list(),
          context__.vals_r("delta_mean"),
          "assigning variable delta_mean_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 4;
          assign(delta_mean, cons_list(index_uni(sym1__), nil_index_list()),
            delta_mean_flat__[(pos__ - 1)], "assigning variable delta_mean");
          current_statement__ = 4;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> delta_mean_free__;
      delta_mean_free__ = Eigen::Matrix<double, -1, 1>(M);
      stan::math::fill(delta_mean_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 4;
        assign(delta_mean_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(delta_mean[(sym1__ - 1)], 0, 1),
          "assigning variable delta_mean_free__");}
      Eigen::Matrix<double, -1, 1> background_mean;
      background_mean = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(background_mean, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> background_mean_flat__;
        current_statement__ = 5;
        assign(background_mean_flat__, nil_index_list(),
          context__.vals_r("background_mean"),
          "assigning variable background_mean_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 5;
          assign(background_mean,
            cons_list(index_uni(sym1__), nil_index_list()),
            background_mean_flat__[(pos__ - 1)],
            "assigning variable background_mean");
          current_statement__ = 5;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> background_mean_free__;
      background_mean_free__ = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(background_mean_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 5;
        assign(background_mean_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(background_mean[(sym1__ - 1)], 0, 0.5),
          "assigning variable background_mean_free__");}
      double tau_a;
      tau_a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      tau_a = context__.vals_r("tau_a")[(1 - 1)];
      double tau_a_free__;
      tau_a_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      tau_a_free__ = stan::math::lb_free(tau_a, 0);
      double tau_b;
      tau_b = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      tau_b = context__.vals_r("tau_b")[(1 - 1)];
      double tau_b_free__;
      tau_b_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      tau_b_free__ = stan::math::lb_free(tau_b, 0);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= (N - 1); ++sym2__) {
          vars__.emplace_back(r_free__[(sym1__ - 1)][(sym2__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          vars__.emplace_back(background_free__[(sym1__ - 1)][(sym2__ - 1)]);
        }}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(delta_free__[(sym1__ - 1)][(sym2__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(delta_mean_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(background_mean_free__[(sym1__ - 1)]);}
      vars__.emplace_back(tau_a_free__);
      vars__.emplace_back(tau_b_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("r");
    names__.emplace_back("background");
    names__.emplace_back("delta");
    names__.emplace_back("delta_mean");
    names__.emplace_back("background_mean");
    names__.emplace_back("tau_a");
    names__.emplace_back("tau_b");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(M)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "r" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "background" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "delta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "delta_mean" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "background_mean" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "tau_a");
    param_names__.emplace_back(std::string() + "tau_b");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= (N - 1); ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "r" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "background" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "delta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "delta_mean" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "background_mean" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "tau_a");
    param_names__.emplace_back(std::string() + "tau_b");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"r\",\"type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"parameters\"},{\"name\":\"background\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << M << "}},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"parameters\"},{\"name\":\"delta_mean\",\"type\":{\"name\":\"vector\",\"length\":" << M << "},\"block\":\"parameters\"},{\"name\":\"background_mean\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"tau_a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_b\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"r\",\"type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"vector\",\"length\":" << (N - 1) << "}},\"block\":\"parameters\"},{\"name\":\"background\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << M << "}},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"parameters\"},{\"name\":\"delta_mean\",\"type\":{\"name\":\"vector\",\"length\":" << M << "},\"block\":\"parameters\"},{\"name\":\"background_mean\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"tau_a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_b\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_shrinkage_namespace::model_shrinkage;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_shrinkage_namespace::profiles__;
}
#endif
#endif
