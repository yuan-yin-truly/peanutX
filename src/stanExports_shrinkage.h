// Generated by rstantools.  Do not edit by hand.

/*
    peanutX is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    peanutX is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with peanutX.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_shrinkage_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_shrinkage");
    reader.add_event(75, 73, "end", "model_shrinkage");
    return reader;
}
#include <stan_meta_header.hpp>
class model_shrinkage
  : public stan::model::model_base_crtp<model_shrinkage> {
private:
        int N;
        int M;
        int K;
        std::vector<int> cell_type;
        std::vector<std::vector<int> > counts;
        std::vector<int> OC;
        int run_estimation;
        vector_d p;
        double delta_sd;
        double background_sd;
public:
    model_shrinkage(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_shrinkage(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_shrinkage_namespace::model_shrinkage";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "M", "int", context__.to_vec());
            M = int(0);
            vals_i__ = context__.vals_i("M");
            pos__ = 0;
            M = vals_i__[pos__++];
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            current_statement_begin__ = 7;
            validate_non_negative_index("cell_type", "M", M);
            context__.validate_dims("data initialization", "cell_type", "int", context__.to_vec(M));
            cell_type = std::vector<int>(M, int(0));
            vals_i__ = context__.vals_i("cell_type");
            pos__ = 0;
            size_t cell_type_k_0_max__ = M;
            for (size_t k_0__ = 0; k_0__ < cell_type_k_0_max__; ++k_0__) {
                cell_type[k_0__] = vals_i__[pos__++];
            }
            size_t cell_type_i_0_max__ = M;
            for (size_t i_0__ = 0; i_0__ < cell_type_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "cell_type[i_0__]", cell_type[i_0__], 1);
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("counts", "N", N);
            validate_non_negative_index("counts", "M", M);
            context__.validate_dims("data initialization", "counts", "int", context__.to_vec(N,M));
            counts = std::vector<std::vector<int> >(N, std::vector<int>(M, int(0)));
            vals_i__ = context__.vals_i("counts");
            pos__ = 0;
            size_t counts_k_0_max__ = N;
            size_t counts_k_1_max__ = M;
            for (size_t k_1__ = 0; k_1__ < counts_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < counts_k_0_max__; ++k_0__) {
                    counts[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t counts_i_0_max__ = N;
            size_t counts_i_1_max__ = M;
            for (size_t i_0__ = 0; i_0__ < counts_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < counts_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "counts[i_0__][i_1__]", counts[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 11;
            validate_non_negative_index("OC", "M", M);
            context__.validate_dims("data initialization", "OC", "int", context__.to_vec(M));
            OC = std::vector<int>(M, int(0));
            vals_i__ = context__.vals_i("OC");
            pos__ = 0;
            size_t OC_k_0_max__ = M;
            for (size_t k_0__ = 0; k_0__ < OC_k_0_max__; ++k_0__) {
                OC[k_0__] = vals_i__[pos__++];
            }
            size_t OC_i_0_max__ = M;
            for (size_t i_0__ = 0; i_0__ < OC_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "OC[i_0__]", OC[i_0__], 1);
            }
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "run_estimation", "int", context__.to_vec());
            run_estimation = int(0);
            vals_i__ = context__.vals_i("run_estimation");
            pos__ = 0;
            run_estimation = vals_i__[pos__++];
            check_greater_or_equal(function__, "run_estimation", run_estimation, 0);
            check_less_or_equal(function__, "run_estimation", run_estimation, 1);
            current_statement_begin__ = 15;
            validate_non_negative_index("p", "N", N);
            context__.validate_dims("data initialization", "p", "vector_d", context__.to_vec(N));
            p = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("p");
            pos__ = 0;
            size_t p_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < p_j_1_max__; ++j_1__) {
                p(j_1__) = vals_r__[pos__++];
            }
            stan::math::check_simplex(function__, "p", p);
            current_statement_begin__ = 17;
            context__.validate_dims("data initialization", "delta_sd", "double", context__.to_vec());
            delta_sd = double(0);
            vals_r__ = context__.vals_r("delta_sd");
            pos__ = 0;
            delta_sd = vals_r__[pos__++];
            current_statement_begin__ = 18;
            context__.validate_dims("data initialization", "background_sd", "double", context__.to_vec());
            background_sd = double(0);
            vals_r__ = context__.vals_r("background_sd");
            pos__ = 0;
            background_sd = vals_r__[pos__++];
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 25;
            validate_non_negative_index("r", "N", N);
            validate_non_negative_index("r", "K", K);
            num_params_r__ += ((N - 1) * K);
            current_statement_begin__ = 27;
            validate_non_negative_index("background", "M", M);
            validate_non_negative_index("background", "N", N);
            num_params_r__ += (M * N);
            current_statement_begin__ = 29;
            validate_non_negative_index("delta", "N", N);
            validate_non_negative_index("delta", "M", M);
            num_params_r__ += (N * M);
            current_statement_begin__ = 31;
            validate_non_negative_index("delta_mean", "M", M);
            num_params_r__ += M;
            current_statement_begin__ = 32;
            validate_non_negative_index("background_mean", "N", N);
            num_params_r__ += N;
            current_statement_begin__ = 34;
            num_params_r__ += 1;
            current_statement_begin__ = 35;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_shrinkage() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 25;
        if (!(context__.contains_r("r")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable r missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("r");
        pos__ = 0U;
        validate_non_negative_index("r", "N", N);
        validate_non_negative_index("r", "K", K);
        context__.validate_dims("parameter initialization", "r", "vector_d", context__.to_vec(K,N));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > r(K, Eigen::Matrix<double, Eigen::Dynamic, 1>(N));
        size_t r_j_1_max__ = N;
        size_t r_k_0_max__ = K;
        for (size_t j_1__ = 0; j_1__ < r_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < r_k_0_max__; ++k_0__) {
                r[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t r_i_0_max__ = K;
        for (size_t i_0__ = 0; i_0__ < r_i_0_max__; ++i_0__) {
            try {
                writer__.simplex_unconstrain(r[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable r: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 27;
        if (!(context__.contains_r("background")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable background missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("background");
        pos__ = 0U;
        validate_non_negative_index("background", "M", M);
        validate_non_negative_index("background", "N", N);
        context__.validate_dims("parameter initialization", "background", "vector_d", context__.to_vec(N,M));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > background(N, Eigen::Matrix<double, Eigen::Dynamic, 1>(M));
        size_t background_j_1_max__ = M;
        size_t background_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < background_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < background_k_0_max__; ++k_0__) {
                background[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t background_i_0_max__ = N;
        for (size_t i_0__ = 0; i_0__ < background_i_0_max__; ++i_0__) {
            try {
                writer__.vector_lub_unconstrain(0, 0.5, background[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable background: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 29;
        if (!(context__.contains_r("delta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable delta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("delta");
        pos__ = 0U;
        validate_non_negative_index("delta", "N", N);
        validate_non_negative_index("delta", "M", M);
        context__.validate_dims("parameter initialization", "delta", "vector_d", context__.to_vec(M,N));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > delta(M, Eigen::Matrix<double, Eigen::Dynamic, 1>(N));
        size_t delta_j_1_max__ = N;
        size_t delta_k_0_max__ = M;
        for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < delta_k_0_max__; ++k_0__) {
                delta[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t delta_i_0_max__ = M;
        for (size_t i_0__ = 0; i_0__ < delta_i_0_max__; ++i_0__) {
            try {
                writer__.vector_lub_unconstrain(0, 1, delta[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable delta: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 31;
        if (!(context__.contains_r("delta_mean")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable delta_mean missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("delta_mean");
        pos__ = 0U;
        validate_non_negative_index("delta_mean", "M", M);
        context__.validate_dims("parameter initialization", "delta_mean", "vector_d", context__.to_vec(M));
        Eigen::Matrix<double, Eigen::Dynamic, 1> delta_mean(M);
        size_t delta_mean_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < delta_mean_j_1_max__; ++j_1__) {
            delta_mean(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0, 1, delta_mean);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable delta_mean: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 32;
        if (!(context__.contains_r("background_mean")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable background_mean missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("background_mean");
        pos__ = 0U;
        validate_non_negative_index("background_mean", "N", N);
        context__.validate_dims("parameter initialization", "background_mean", "vector_d", context__.to_vec(N));
        Eigen::Matrix<double, Eigen::Dynamic, 1> background_mean(N);
        size_t background_mean_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < background_mean_j_1_max__; ++j_1__) {
            background_mean(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0, 0.5, background_mean);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable background_mean: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 34;
        if (!(context__.contains_r("tau_a")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau_a missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau_a");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "tau_a", "double", context__.to_vec());
        double tau_a(0);
        tau_a = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, tau_a);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau_a: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 35;
        if (!(context__.contains_r("tau_b")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau_b missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau_b");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "tau_b", "double", context__.to_vec());
        double tau_b(0);
        tau_b = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, tau_b);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau_b: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 25;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > r;
            size_t r_d_0_max__ = K;
            r.reserve(r_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < r_d_0_max__; ++d_0__) {
                if (jacobian__)
                    r.push_back(in__.simplex_constrain(N, lp__));
                else
                    r.push_back(in__.simplex_constrain(N));
            }
            current_statement_begin__ = 27;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > background;
            size_t background_d_0_max__ = N;
            background.reserve(background_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < background_d_0_max__; ++d_0__) {
                if (jacobian__)
                    background.push_back(in__.vector_lub_constrain(0, 0.5, M, lp__));
                else
                    background.push_back(in__.vector_lub_constrain(0, 0.5, M));
            }
            current_statement_begin__ = 29;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > delta;
            size_t delta_d_0_max__ = M;
            delta.reserve(delta_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < delta_d_0_max__; ++d_0__) {
                if (jacobian__)
                    delta.push_back(in__.vector_lub_constrain(0, 1, N, lp__));
                else
                    delta.push_back(in__.vector_lub_constrain(0, 1, N));
            }
            current_statement_begin__ = 31;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> delta_mean;
            (void) delta_mean;  // dummy to suppress unused var warning
            if (jacobian__)
                delta_mean = in__.vector_lub_constrain(0, 1, M, lp__);
            else
                delta_mean = in__.vector_lub_constrain(0, 1, M);
            current_statement_begin__ = 32;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> background_mean;
            (void) background_mean;  // dummy to suppress unused var warning
            if (jacobian__)
                background_mean = in__.vector_lub_constrain(0, 0.5, N, lp__);
            else
                background_mean = in__.vector_lub_constrain(0, 0.5, N);
            current_statement_begin__ = 34;
            local_scalar_t__ tau_a;
            (void) tau_a;  // dummy to suppress unused var warning
            if (jacobian__)
                tau_a = in__.scalar_lb_constrain(0, lp__);
            else
                tau_a = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 35;
            local_scalar_t__ tau_b;
            (void) tau_b;  // dummy to suppress unused var warning
            if (jacobian__)
                tau_b = in__.scalar_lb_constrain(0, lp__);
            else
                tau_b = in__.scalar_lb_constrain(0);
            // model body
            current_statement_begin__ = 42;
            lp_accum__.add(normal_log<propto__>(tau_a, 0, delta_sd));
            current_statement_begin__ = 43;
            lp_accum__.add(normal_log<propto__>(tau_b, 0, background_sd));
            current_statement_begin__ = 47;
            for (int m = 1; m <= M; ++m) {
                current_statement_begin__ = 48;
                lp_accum__.add(normal_log<propto__>(get_base1(delta, m, "delta", 1), get_base1(delta_mean, m, "delta_mean", 1), tau_a));
            }
            current_statement_begin__ = 54;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 55;
                lp_accum__.add(normal_log<propto__>(get_base1(background, n, "background", 1), get_base1(background_mean, n, "background_mean", 1), tau_b));
            }
            current_statement_begin__ = 60;
            if (as_bool(logical_eq(run_estimation, 1))) {
                current_statement_begin__ = 62;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 63;
                    for (int m = 1; m <= M; ++m) {
                        current_statement_begin__ = 65;
                        lp_accum__.add(poisson_log<propto__>(get_base1(get_base1(counts, n, "counts", 1), m, "counts", 2), (((((get_base1(OC, m, "OC", 1) * (1 - get_base1(get_base1(background, n, "background", 1), m, "background", 2))) * get_base1(get_base1(delta, m, "delta", 1), n, "delta", 2)) * get_base1(p, n, "p", 1)) + (((get_base1(OC, m, "OC", 1) * (1 - get_base1(get_base1(background, n, "background", 1), m, "background", 2))) * (1 - get_base1(get_base1(delta, m, "delta", 1), n, "delta", 2))) * get_base1(get_base1(r, get_base1(cell_type, m, "cell_type", 1), "r", 1), n, "r", 2))) + (get_base1(OC, m, "OC", 1) * get_base1(get_base1(background, n, "background", 1), m, "background", 2)))));
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("r");
        names__.push_back("background");
        names__.push_back("delta");
        names__.push_back("delta_mean");
        names__.push_back("background_mean");
        names__.push_back("tau_a");
        names__.push_back("tau_b");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_shrinkage_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > r;
        size_t r_d_0_max__ = K;
        r.reserve(r_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < r_d_0_max__; ++d_0__) {
            r.push_back(in__.simplex_constrain(N));
        }
        size_t r_j_1_max__ = N;
        size_t r_k_0_max__ = K;
        for (size_t j_1__ = 0; j_1__ < r_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < r_k_0_max__; ++k_0__) {
                vars__.push_back(r[k_0__](j_1__));
            }
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > background;
        size_t background_d_0_max__ = N;
        background.reserve(background_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < background_d_0_max__; ++d_0__) {
            background.push_back(in__.vector_lub_constrain(0, 0.5, M));
        }
        size_t background_j_1_max__ = M;
        size_t background_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < background_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < background_k_0_max__; ++k_0__) {
                vars__.push_back(background[k_0__](j_1__));
            }
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > delta;
        size_t delta_d_0_max__ = M;
        delta.reserve(delta_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < delta_d_0_max__; ++d_0__) {
            delta.push_back(in__.vector_lub_constrain(0, 1, N));
        }
        size_t delta_j_1_max__ = N;
        size_t delta_k_0_max__ = M;
        for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < delta_k_0_max__; ++k_0__) {
                vars__.push_back(delta[k_0__](j_1__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> delta_mean = in__.vector_lub_constrain(0, 1, M);
        size_t delta_mean_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < delta_mean_j_1_max__; ++j_1__) {
            vars__.push_back(delta_mean(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> background_mean = in__.vector_lub_constrain(0, 0.5, N);
        size_t background_mean_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < background_mean_j_1_max__; ++j_1__) {
            vars__.push_back(background_mean(j_1__));
        }
        double tau_a = in__.scalar_lb_constrain(0);
        vars__.push_back(tau_a);
        double tau_b = in__.scalar_lb_constrain(0);
        vars__.push_back(tau_b);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_shrinkage";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t r_j_1_max__ = N;
        size_t r_k_0_max__ = K;
        for (size_t j_1__ = 0; j_1__ < r_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < r_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "r" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t background_j_1_max__ = M;
        size_t background_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < background_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < background_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "background" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t delta_j_1_max__ = N;
        size_t delta_k_0_max__ = M;
        for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < delta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "delta" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t delta_mean_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < delta_mean_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_mean" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t background_mean_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < background_mean_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "background_mean" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_a";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_b";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t r_j_1_max__ = (N - 1);
        size_t r_k_0_max__ = K;
        for (size_t j_1__ = 0; j_1__ < r_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < r_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "r" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t background_j_1_max__ = M;
        size_t background_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < background_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < background_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "background" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t delta_j_1_max__ = N;
        size_t delta_k_0_max__ = M;
        for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < delta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "delta" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t delta_mean_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < delta_mean_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_mean" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t background_mean_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < background_mean_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "background_mean" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_a";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_b";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_shrinkage_namespace::model_shrinkage stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
